// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectId, PageResult, RoleMethods, errors, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-ext');

  PageResult = require('simple-paginator').PageResult;

  errors = require('some-errors');

  mongoose = require("mongoose");

  ObjectId = mongoose.Types.ObjectId;

  module.exports = RoleMethods = (function() {
    var CREATE_FIELDS, UPDATE_FIELDS;

    CREATE_FIELDS = ['_id', 'name', 'description', 'isInternal'];

    UPDATE_FIELDS = ['name', 'description', 'isInternal'];

    function RoleMethods(models) {
      this.models = models;
      this.destroy = __bind(this.destroy, this);
      this.patch = __bind(this.patch, this);
      this.get = __bind(this.get, this);
      this.create = __bind(this.create, this);
      this.all = __bind(this.all, this);
    }

    RoleMethods.prototype.all = function(options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Role.count({}, function(err, totalCount) {
        var query;
        if (err) {
          return cb(err);
        }
        options.offset || (options.offset = 0);
        options.count || (options.count = 1000);
        query = _this.models.Role.find({});
        query.sort('name');
        if (options.select && options.select.length > 0) {
          query.select(options.select);
        }
        query.setOptions({
          skip: options.offset,
          limit: options.count
        });
        return query.exec(function(err, items) {
          if (err) {
            return cb(err);
          }
          return cb(null, new PageResult(items || [], totalCount, options.offset, options.count));
        });
      });
    };

    /*
    Create a new processDefinition
    */


    RoleMethods.prototype.create = function(objs, options, cb) {
      var data, model,
        _this = this;
      if (objs == null) {
        objs = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {};
      _.extendFiltered(data, CREATE_FIELDS, objs);
      model = new this.models.Role(data);
      return model.save(function(err) {
        if (err) {
          return cb(err);
        }
        return cb(null, model, true);
      });
    };

    /*
    Retrieve a single processDefinition-item through it's id
    */


    RoleMethods.prototype.get = function(roleId, options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Role.findOne({
        _id: roleId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        return cb(null, item);
      });
    };

    RoleMethods.prototype.patch = function(roleId, obj, options, cb) {
      var _this = this;
      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Role.findOne({
        _id: roleId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("" + roleId));
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    RoleMethods.prototype.destroy = function(roleId, options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Role.findOne({
        _id: roleId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(null);
        }
        return item.remove(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      });
    };

    return RoleMethods;

  })();

}).call(this);
