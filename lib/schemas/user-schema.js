// Generated by CoffeeScript 1.6.3
(function() {
  var EmailSchema, UserIdentitySchema, UserImageSchema, UserProfileSchema, UserSchema, mongoose, pluginDeleteParanoid, pluginResourceLimits, pluginTimestamp, _;

  mongoose = require('mongoose');

  _ = require('underscore');

  pluginTimestamp = require("mongoose-plugins-timestamp");

  pluginDeleteParanoid = require("mongoose-plugins-delete-paranoid");

  pluginResourceLimits = require("mongoose-plugins-resource-limits");

  EmailSchema = require('./email-schema');

  UserIdentitySchema = require('./user-identity-schema');

  UserProfileSchema = require('./user-profile-schema');

  UserImageSchema = require('./user-image-schema');

  /*
    Perhaps we should talk about identities, not users
    Anonymous | Cookie
    Local: Username
    Oauth: Twitter : Identifier
  */


  module.exports = UserSchema = new mongoose.Schema({
    username: {
      type: String
    },
    displayName: {
      type: String
    },
    password: {
      type: String
    },
    identities: {
      type: [UserIdentitySchema],
      "default": []
    },
    profileLinks: {
      type: [UserProfileSchema],
      "default": []
    },
    userImages: {
      type: [UserImageSchema],
      "default": []
    },
    selectedUserImage: {
      type: String
    },
    primaryEmail: {
      type: String
    },
    emails: {
      type: [exports.EmailSchema],
      "default": []
    },
    roles: {
      type: [String],
      "default": []
    },
    onboardingState: {
      type: String,
      "default": null
    },
    needsInit: {
      type: Boolean,
      "default": false
    },
    data: {
      type: mongoose.Schema.Types.Mixed,
      "default": function() {
        return {};
      }
    },
    stats: {
      type: mongoose.Schema.Types.Mixed,
      "default": function() {
        return {};
      }
    },
    description: {
      type: String,
      trim: true,
      "default": '',
      match: /.{0,500}/
    },
    gender: {
      type: String,
      "default": ''
    },
    timezone: {
      type: Number,
      "default": 0
    },
    locale: {
      type: String,
      "default": 'en_us'
    },
    verified: {
      type: Boolean,
      "default": false
    },
    title: {
      type: String
    },
    location: {
      type: String
    },
    resetPasswordToken: {
      type: {
        token: String,
        validTill: Date
      }
    }
  }, {
    strict: true
  });

  UserSchema.path('username').index({
    unique: true,
    sparse: false
  });

  UserSchema.path('primaryEmail').index({
    unique: true,
    sparse: true
  });

  UserSchema.plugin(pluginTimestamp.timestamps);

  UserSchema.plugin(pluginDeleteParanoid.deleteParanoid);

  UserSchema.plugin(pluginResourceLimits.resourceLimits);

  UserSchema.pre('save', function(next) {
    if (this.username) {
      this.username = this.username.toLowerCase();
    }
    if (this.primaryEmail) {
      this.primaryEmail = this.primaryEmail.toLowerCase();
    }
    return next();
  });

  UserSchema.methods.toActor = function() {
    var actor;
    actor = {
      actorId: this._id
    };
    return actor;
  };

  UserSchema.methods.toRest = function(baseUrl, actor) {
    var localUrl, res;
    localUrl = "" + baseUrl + "/" + this._id;
    res = {
      url: localUrl,
      id: this._id,
      username: this.username,
      displayName: this.displayName,
      description: this.description,
      identities: _.map(this.identities, function(x) {
        return x.toRest("" + localUrl + "/identities", actor);
      }) || [],
      profileLinks: this.profileLinks || [],
      userImages: this.userImages || [],
      selectedUserImage: this.selectedUserImage,
      emails: this.emails || [],
      roles: this.roles || [],
      data: this.data || {},
      stats: this.stats || {},
      resourceLimits: this.resourceLimits || {},
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      createdBy: this.createdBy,
      isDeleted: this.isDeleted || false,
      deletedAt: this.deletedAt || null,
      onboardingState: this.onboardingState,
      primaryEmail: this.primaryEmail,
      resetPasswordToken: this.resetPasswordToken,
      title: this.title,
      location: this.location,
      needsInit: this.needsInit,
      gender: this.gender,
      timezone: this.timezone,
      locale: this.locale,
      verified: this.verified
    };
    return res;
  };

}).call(this);
