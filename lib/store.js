// Generated by CoffeeScript 1.6.3
(function() {
  var AdminMethods, EmailSchema, EntityMethods, OauthAccessGrantSchema, OauthAccessTokenSchema, OauthAppMethods, OauthAppSchema, OauthAuthMethods, OauthClientSchema, OauthRedirectUriSchema, OauthScopeMethods, OrganizationMethods, OrganizationSchema, Store, UserIdentitySchema, UserImageSchema, UserMethods, UserProfileSchema, UserSchema, mongoose, _;

  mongoose = require('mongoose');

  _ = require('underscore');

  UserSchema = require('./schemas/user-schema');

  OrganizationSchema = require('./schemas/organization-schema');

  UserIdentitySchema = require('./schemas/user-identity-schema');

  UserImageSchema = require('./schemas/user-image-schema');

  UserProfileSchema = require('./schemas/user-profile-schema');

  EmailSchema = require('./schemas/email-schema');

  OauthAccessGrantSchema = require('./schemas/oauth-access-grant-schema');

  OauthAccessTokenSchema = require('./schemas/oauth-access-token-schema');

  OauthAppSchema = require('./schemas/oauth-app-schema');

  OauthRedirectUriSchema = require('./schemas/oauth-redirect-uri-schema');

  OauthClientSchema = require('./schemas/oauth-client-schema');

  UserMethods = require('./methods/user-methods');

  OrganizationMethods = require('./methods/organization-methods');

  EntityMethods = require('./methods/entity-methods');

  OauthAppMethods = require('./methods/oauth-app-methods');

  OauthAuthMethods = require('./methods/oauth-auth-methods');

  OauthScopeMethods = require('./methods/oauth-scope-methods');

  AdminMethods = require('./methods/admin-methods');

  module.exports = Store = (function() {
    function Store(settings) {
      var configOauthProvider, m, schema, _i, _len, _ref;
      this.settings = settings != null ? settings : {};
      _.defaults(this.settings, {
        autoIndex: true
      });
      configOauthProvider = this.settings.oauthProvider || {
        scopes: []
      };
      this.schemas = [UserSchema, UserIdentitySchema, UserImageSchema, UserProfileSchema, EmailSchema, OrganizationSchema, OauthAccessGrantSchema, OauthAccessTokenSchema, OauthAppSchema, OauthRedirectUriSchema, OauthClientSchema];
      _ref = this.schemas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        schema = _ref[_i];
        schema.set('autoIndex', this.settings.autoIndex);
      }
      m = mongoose;
      if (this.settings.connection) {
        m = this.settings.connection;
      }
      this.models = {
        User: m.model("User", UserSchema),
        UserIdentity: m.model("UserIdentity", UserIdentitySchema),
        UserImage: m.model("UserImage", UserImageSchema),
        UserProfile: m.model("UserProfile", UserProfileSchema),
        Email: m.model("Email", EmailSchema),
        Organization: m.model("Organization", OrganizationSchema),
        OauthAccessGrant: m.model("OAuthAccessGrant", OauthAccessGrantSchema),
        OauthAccessToken: m.model("OauthAccessToken", OauthAccessTokenSchema),
        OauthApp: m.model("OauthApp", OauthAppSchema),
        OauthRedirectUri: m.model("OauthRedirectUri", OauthRedirectUriSchema),
        OauthClient: m.model("OauthClient", OauthClientSchema)
      };
      this.users = new UserMethods(this.models);
      this.organizations = new OrganizationMethods(this.models);
      this.entities = new EntityMethods(this.models);
      this.oauthScopes = new OauthScopeMethods(this.models, configOauthProvider);
      this.oauthApps = new OauthAppMethods(this.models, this.oauthScopes);
      this.oauthAuth = new OauthAuthMethods(this.models);
      this.admin = new AdminMethods(this.models, this.users, this.oauthApps, this.oauthAuth);
    }

    return Store;

  })();

}).call(this);
